# Configuration Eureka
eureka.instance.instance-id=${spring.application.name}:${server.port}
eureka.instance.hostname=bookstore-app
eureka.instance.preferIpAddress=false
eureka.instance.nonSecurePort=${server.port}

eureka.instance.homePageUrl=http://bookstore-app.localhost:${server.port}
eureka.instance.statusPageUrl=http://bookstore-app.localhost:${server.port}/actuator/info
eureka.instance.healthCheckUrl=http://bookstore-app.localhost:${server.port}/actuator/health




#Configuration du serveur
#Nom de l'application (utile pour Eureka et Spring Cloud)
spring.application.name=bookstore
# Dï¿½finit le port sur lequel le microservice Order & Payment sera lancï¿½
server.port=8085

# URL de connexion ï¿½ la base MySQL
# Configuration de la base de donnï¿½es MySQL
spring.datasource.url=jdbc:mysql://localhost:3306/bookstore?createDatabaseIfNotExist=true
# Nom d'utilisateur de la base de donnï¿½es
spring.datasource.username=root

# Dï¿½sactiver Spring Cloud Config
spring.cloud.config.enabled=false

#Configuration de JPA & Hibernate
# Affiche les requï¿½tes SQL exï¿½cutï¿½es dans la console
spring.jpa.show-sql=true
# Hibernate met ï¿½ jour les tables automatiquement
spring.jpa.hibernate.ddl-auto=update

#server.servlet.context-path=/bookstore

# Mode fail-safe
spring.config.on-not-found=ignore
spring.config.import=optional:file:${user.dir}/.env[com.example.bookstore.config.DotenvPropertySourceFactory]

# Valeurs par dÃ©faut (pour les tests)
stripe.secret.key=${STRIPE_SECRET_KEY:sk_test_default}
stripe.public.key=${STRIPE_PUBLIC_KEY:pk_test_default}
spring.datasource.password=${DB_PASSWORD:root}

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.client.register-with-eureka=true